package ffm.geok.com.javagen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ffm.geok.com.model.FireMediaEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FIRE_MEDIA_ENTITY".
*/
public class FireMediaEntityDao extends AbstractDao<FireMediaEntity, String> {

    public static final String TABLENAME = "FIRE_MEDIA_ENTITY";

    /**
     * Properties of entity FireMediaEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, String.class, "pid", true, "PID");
        public final static Property Fireid = new Property(1, String.class, "fireid", false, "FIREID");
        public final static Property Objtp = new Property(2, String.class, "objtp", false, "OBJTP");
        public final static Property Adcd = new Property(3, String.class, "adcd", false, "ADCD");
        public final static Property Fpath = new Property(4, String.class, "fpath", false, "FPATH");
        public final static Property Lgtd = new Property(5, Double.class, "lgtd", false, "LGTD");
        public final static Property Lttd = new Property(6, Double.class, "lttd", false, "LTTD");
        public final static Property Ptime = new Property(7, String.class, "ptime", false, "PTIME");
        public final static Property Fname = new Property(8, String.class, "fname", false, "FNAME");
        public final static Property Multitype = new Property(9, String.class, "multitype", false, "MULTITYPE");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property Moditime = new Property(11, String.class, "moditime", false, "MODITIME");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
    }


    public FireMediaEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FireMediaEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FIRE_MEDIA_ENTITY\" (" + //
                "\"PID\" TEXT PRIMARY KEY NOT NULL ," + // 0: pid
                "\"FIREID\" TEXT," + // 1: fireid
                "\"OBJTP\" TEXT," + // 2: objtp
                "\"ADCD\" TEXT," + // 3: adcd
                "\"FPATH\" TEXT," + // 4: fpath
                "\"LGTD\" REAL," + // 5: lgtd
                "\"LTTD\" REAL," + // 6: lttd
                "\"PTIME\" TEXT," + // 7: ptime
                "\"FNAME\" TEXT," + // 8: fname
                "\"MULTITYPE\" TEXT," + // 9: multitype
                "\"STATUS\" TEXT," + // 10: status
                "\"MODITIME\" TEXT," + // 11: moditime
                "\"REMARK\" TEXT);"); // 12: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FIRE_MEDIA_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FireMediaEntity entity) {
        stmt.clearBindings();
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(1, pid);
        }
 
        String fireid = entity.getFireid();
        if (fireid != null) {
            stmt.bindString(2, fireid);
        }
 
        String objtp = entity.getObjtp();
        if (objtp != null) {
            stmt.bindString(3, objtp);
        }
 
        String adcd = entity.getAdcd();
        if (adcd != null) {
            stmt.bindString(4, adcd);
        }
 
        String fpath = entity.getFpath();
        if (fpath != null) {
            stmt.bindString(5, fpath);
        }
 
        Double lgtd = entity.getLgtd();
        if (lgtd != null) {
            stmt.bindDouble(6, lgtd);
        }
 
        Double lttd = entity.getLttd();
        if (lttd != null) {
            stmt.bindDouble(7, lttd);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(8, ptime);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(9, fname);
        }
 
        String multitype = entity.getMultitype();
        if (multitype != null) {
            stmt.bindString(10, multitype);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String moditime = entity.getModitime();
        if (moditime != null) {
            stmt.bindString(12, moditime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FireMediaEntity entity) {
        stmt.clearBindings();
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(1, pid);
        }
 
        String fireid = entity.getFireid();
        if (fireid != null) {
            stmt.bindString(2, fireid);
        }
 
        String objtp = entity.getObjtp();
        if (objtp != null) {
            stmt.bindString(3, objtp);
        }
 
        String adcd = entity.getAdcd();
        if (adcd != null) {
            stmt.bindString(4, adcd);
        }
 
        String fpath = entity.getFpath();
        if (fpath != null) {
            stmt.bindString(5, fpath);
        }
 
        Double lgtd = entity.getLgtd();
        if (lgtd != null) {
            stmt.bindDouble(6, lgtd);
        }
 
        Double lttd = entity.getLttd();
        if (lttd != null) {
            stmt.bindDouble(7, lttd);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(8, ptime);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(9, fname);
        }
 
        String multitype = entity.getMultitype();
        if (multitype != null) {
            stmt.bindString(10, multitype);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String moditime = entity.getModitime();
        if (moditime != null) {
            stmt.bindString(12, moditime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FireMediaEntity readEntity(Cursor cursor, int offset) {
        FireMediaEntity entity = new FireMediaEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // pid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fireid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // objtp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adcd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fpath
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // lgtd
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // lttd
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ptime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // multitype
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // moditime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FireMediaEntity entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFireid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setObjtp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdcd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFpath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLgtd(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLttd(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPtime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMultitype(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setModitime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FireMediaEntity entity, long rowId) {
        return entity.getPid();
    }
    
    @Override
    public String getKey(FireMediaEntity entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FireMediaEntity entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
