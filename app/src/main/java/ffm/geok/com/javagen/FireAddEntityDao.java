package ffm.geok.com.javagen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ffm.geok.com.model.FireAddEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FIRE_ADD_ENTITY".
*/
public class FireAddEntityDao extends AbstractDao<FireAddEntity, String> {

    public static final String TABLENAME = "FIRE_ADD_ENTITY";

    /**
     * Properties of entity FireAddEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property See = new Property(2, String.class, "see", false, "SEE");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATETIME");
        public final static Property FindTime = new Property(4, String.class, "findTime", false, "FINDTIME");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATETIME");
        public final static Property Province = new Property(6, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(7, String.class, "city", false, "CITY");
        public final static Property County = new Property(8, String.class, "county", false, "COUNTY");
        public final static Property Lon = new Property(9, String.class, "lon", false, "LON");
        public final static Property Lat = new Property(10, String.class, "lat", false, "LAT");
        public final static Property Dem = new Property(11, String.class, "dem", false, "DEM");
        public final static Property Adcd = new Property(12, String.class, "adcd", false, "ADCD");
    }


    public FireAddEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FireAddEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FIRE_ADD_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"SEE\" TEXT," + // 2: see
                "\"CREATETIME\" TEXT," + // 3: createTime
                "\"FINDTIME\" TEXT," + // 4: findTime
                "\"UPDATETIME\" TEXT," + // 5: updateTime
                "\"PROVINCE\" TEXT," + // 6: province
                "\"CITY\" TEXT," + // 7: city
                "\"COUNTY\" TEXT," + // 8: county
                "\"LON\" TEXT," + // 9: lon
                "\"LAT\" TEXT," + // 10: lat
                "\"DEM\" TEXT," + // 11: dem
                "\"ADCD\" TEXT);"); // 12: adcd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FIRE_ADD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FireAddEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String see = entity.getSee();
        if (see != null) {
            stmt.bindString(3, see);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String findTime = entity.getFindTime();
        if (findTime != null) {
            stmt.bindString(5, findTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(7, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(9, county);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(10, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(11, lat);
        }
 
        String dem = entity.getDem();
        if (dem != null) {
            stmt.bindString(12, dem);
        }
 
        String adcd = entity.getAdcd();
        if (adcd != null) {
            stmt.bindString(13, adcd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FireAddEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String see = entity.getSee();
        if (see != null) {
            stmt.bindString(3, see);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String findTime = entity.getFindTime();
        if (findTime != null) {
            stmt.bindString(5, findTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(7, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(9, county);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(10, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(11, lat);
        }
 
        String dem = entity.getDem();
        if (dem != null) {
            stmt.bindString(12, dem);
        }
 
        String adcd = entity.getAdcd();
        if (adcd != null) {
            stmt.bindString(13, adcd);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FireAddEntity readEntity(Cursor cursor, int offset) {
        FireAddEntity entity = new FireAddEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // see
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // findTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // province
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // county
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lon
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lat
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dem
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // adcd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FireAddEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSee(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFindTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvince(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCounty(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLon(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLat(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDem(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAdcd(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FireAddEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(FireAddEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FireAddEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
